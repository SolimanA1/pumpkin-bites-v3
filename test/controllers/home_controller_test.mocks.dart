// Mocks generated by Mockito 5.4.6 from annotations
// in pumpkin_bites_new/test/controllers/home_controller_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:pumpkin_bites_new/models/bite_model.dart' as _i4;
import 'package:pumpkin_bites_new/models/comment_model.dart' as _i5;
import 'package:pumpkin_bites_new/repositories/content_repository.dart' as _i2;
import 'package:pumpkin_bites_new/services/subscription_service.dart' as _i7;
import 'package:pumpkin_bites_new/services/user_progression_service.dart'
    as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class
// ignore_for_file: invalid_use_of_internal_member

/// A class which mocks [ContentRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockContentRepository extends _i1.Mock implements _i2.ContentRepository {
  MockContentRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<_i4.BiteModel?> getTodaysBite() =>
      (super.noSuchMethod(
            Invocation.method(#getTodaysBite, []),
            returnValue: _i3.Future<_i4.BiteModel?>.value(),
          )
          as _i3.Future<_i4.BiteModel?>);

  @override
  _i3.Future<List<_i4.BiteModel>> getCatchUpBites() =>
      (super.noSuchMethod(
            Invocation.method(#getCatchUpBites, []),
            returnValue: _i3.Future<List<_i4.BiteModel>>.value(
              <_i4.BiteModel>[],
            ),
          )
          as _i3.Future<List<_i4.BiteModel>>);

  @override
  _i3.Future<List<_i4.BiteModel>> getUserSequentialBites() =>
      (super.noSuchMethod(
            Invocation.method(#getUserSequentialBites, []),
            returnValue: _i3.Future<List<_i4.BiteModel>>.value(
              <_i4.BiteModel>[],
            ),
          )
          as _i3.Future<List<_i4.BiteModel>>);

  @override
  _i3.Future<_i4.BiteModel?> getBiteById(String? biteId) =>
      (super.noSuchMethod(
            Invocation.method(#getBiteById, [biteId]),
            returnValue: _i3.Future<_i4.BiteModel?>.value(),
          )
          as _i3.Future<_i4.BiteModel?>);

  @override
  _i3.Future<List<_i4.BiteModel>> getBitesByCategory(String? category) =>
      (super.noSuchMethod(
            Invocation.method(#getBitesByCategory, [category]),
            returnValue: _i3.Future<List<_i4.BiteModel>>.value(
              <_i4.BiteModel>[],
            ),
          )
          as _i3.Future<List<_i4.BiteModel>>);

  @override
  _i3.Future<List<_i4.BiteModel>> searchBites(String? query) =>
      (super.noSuchMethod(
            Invocation.method(#searchBites, [query]),
            returnValue: _i3.Future<List<_i4.BiteModel>>.value(
              <_i4.BiteModel>[],
            ),
          )
          as _i3.Future<List<_i4.BiteModel>>);

  @override
  _i3.Future<void> markBiteAsOpened(String? biteId) =>
      (super.noSuchMethod(
            Invocation.method(#markBiteAsOpened, [biteId]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<bool> hasUserAccessToBite(String? biteId) =>
      (super.noSuchMethod(
            Invocation.method(#hasUserAccessToBite, [biteId]),
            returnValue: _i3.Future<bool>.value(false),
          )
          as _i3.Future<bool>);

  @override
  _i3.Future<List<_i5.CommentModel>> getCommentsForBite(String? biteId) =>
      (super.noSuchMethod(
            Invocation.method(#getCommentsForBite, [biteId]),
            returnValue: _i3.Future<List<_i5.CommentModel>>.value(
              <_i5.CommentModel>[],
            ),
          )
          as _i3.Future<List<_i5.CommentModel>>);

  @override
  _i3.Future<void> addComment(String? biteId, String? content) =>
      (super.noSuchMethod(
            Invocation.method(#addComment, [biteId, content]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> replyToComment(String? commentId, String? content) =>
      (super.noSuchMethod(
            Invocation.method(#replyToComment, [commentId, content]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<int> getCommentCount(String? biteId) =>
      (super.noSuchMethod(
            Invocation.method(#getCommentCount, [biteId]),
            returnValue: _i3.Future<int>.value(0),
          )
          as _i3.Future<int>);

  @override
  _i3.Future<void> addReaction(String? biteId, String? reactionType) =>
      (super.noSuchMethod(
            Invocation.method(#addReaction, [biteId, reactionType]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> removeReaction(String? biteId, String? reactionType) =>
      (super.noSuchMethod(
            Invocation.method(#removeReaction, [biteId, reactionType]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<Map<String, int>> getReactionCounts(String? biteId) =>
      (super.noSuchMethod(
            Invocation.method(#getReactionCounts, [biteId]),
            returnValue: _i3.Future<Map<String, int>>.value(<String, int>{}),
          )
          as _i3.Future<Map<String, int>>);

  @override
  _i3.Future<void> clearCache() =>
      (super.noSuchMethod(
            Invocation.method(#clearCache, []),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> refreshCache() =>
      (super.noSuchMethod(
            Invocation.method(#refreshCache, []),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> trackBitePlay(String? biteId) =>
      (super.noSuchMethod(
            Invocation.method(#trackBitePlay, [biteId]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> trackBiteCompletion(String? biteId) =>
      (super.noSuchMethod(
            Invocation.method(#trackBiteCompletion, [biteId]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);
}

/// A class which mocks [UserProgressionService].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserProgressionService extends _i1.Mock
    implements _i6.UserProgressionService {
  MockUserProgressionService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<void> initializeUserProgression([String? userId]) =>
      (super.noSuchMethod(
            Invocation.method(#initializeUserProgression, [userId]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<int> getCurrentDay() =>
      (super.noSuchMethod(
            Invocation.method(#getCurrentDay, []),
            returnValue: _i3.Future<int>.value(0),
          )
          as _i3.Future<int>);

  @override
  _i3.Future<bool> shouldUnlockNextBite() =>
      (super.noSuchMethod(
            Invocation.method(#shouldUnlockNextBite, []),
            returnValue: _i3.Future<bool>.value(false),
          )
          as _i3.Future<bool>);

  @override
  _i3.Future<void> unlockNextBite() =>
      (super.noSuchMethod(
            Invocation.method(#unlockNextBite, []),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> migrateExistingUser(String? userId) =>
      (super.noSuchMethod(
            Invocation.method(#migrateExistingUser, [userId]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> handleTrialExpiration() =>
      (super.noSuchMethod(
            Invocation.method(#handleTrialExpiration, []),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> activateSubscription() =>
      (super.noSuchMethod(
            Invocation.method(#activateSubscription, []),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> checkTrialExpiration() =>
      (super.noSuchMethod(
            Invocation.method(#checkTrialExpiration, []),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);
}

/// A class which mocks [SubscriptionService].
///
/// See the documentation for Mockito's code generation for more information.
class MockSubscriptionService extends _i1.Mock
    implements _i7.SubscriptionService {
  MockSubscriptionService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isSubscriptionActive =>
      (super.noSuchMethod(
            Invocation.getter(#isSubscriptionActive),
            returnValue: false,
          )
          as bool);

  @override
  bool get isInTrialPeriod =>
      (super.noSuchMethod(
            Invocation.getter(#isInTrialPeriod),
            returnValue: false,
          )
          as bool);

  @override
  bool get isSubscriptionFeaturesAvailable =>
      (super.noSuchMethod(
            Invocation.getter(#isSubscriptionFeaturesAvailable),
            returnValue: false,
          )
          as bool);

  @override
  int get trialDaysRemaining =>
      (super.noSuchMethod(
            Invocation.getter(#trialDaysRemaining),
            returnValue: 0,
          )
          as int);

  @override
  _i3.Stream<bool> get subscriptionStatusStream =>
      (super.noSuchMethod(
            Invocation.getter(#subscriptionStatusStream),
            returnValue: _i3.Stream<bool>.empty(),
          )
          as _i3.Stream<bool>);

  @override
  _i3.Stream<bool> get trialStatusStream =>
      (super.noSuchMethod(
            Invocation.getter(#trialStatusStream),
            returnValue: _i3.Stream<bool>.empty(),
          )
          as _i3.Stream<bool>);

  @override
  _i3.Stream<int> get trialDaysRemainingStream =>
      (super.noSuchMethod(
            Invocation.getter(#trialDaysRemainingStream),
            returnValue: _i3.Stream<int>.empty(),
          )
          as _i3.Stream<int>);

  @override
  bool get hasContentAccess =>
      (super.noSuchMethod(
            Invocation.getter(#hasContentAccess),
            returnValue: false,
          )
          as bool);

  @override
  _i3.Future<void> initialize() =>
      (super.noSuchMethod(
            Invocation.method(#initialize, []),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> activateSubscription() =>
      (super.noSuchMethod(
            Invocation.method(#activateSubscription, []),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<bool> checkContentAccess() =>
      (super.noSuchMethod(
            Invocation.method(#checkContentAccess, []),
            returnValue: _i3.Future<bool>.value(false),
          )
          as _i3.Future<bool>);

  @override
  _i3.Future<bool> isUserSubscribed() =>
      (super.noSuchMethod(
            Invocation.method(#isUserSubscribed, []),
            returnValue: _i3.Future<bool>.value(false),
          )
          as _i3.Future<bool>);

  @override
  _i3.Future<void> startFreeTrial() =>
      (super.noSuchMethod(
            Invocation.method(#startFreeTrial, []),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<bool> purchaseSubscription() =>
      (super.noSuchMethod(
            Invocation.method(#purchaseSubscription, []),
            returnValue: _i3.Future<bool>.value(false),
          )
          as _i3.Future<bool>);

  @override
  _i3.Future<void> restorePurchases() =>
      (super.noSuchMethod(
            Invocation.method(#restorePurchases, []),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );
}
