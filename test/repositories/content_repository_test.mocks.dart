// Mocks generated by Mockito 5.4.6 from annotations
// in pumpkin_bites_new/test/repositories/content_repository_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:pumpkin_bites_new/models/bite_model.dart' as _i4;
import 'package:pumpkin_bites_new/models/comment_model.dart' as _i5;
import 'package:pumpkin_bites_new/services/content_service.dart' as _i2;
import 'package:pumpkin_bites_new/services/user_progression_service.dart'
    as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class
// ignore_for_file: invalid_use_of_internal_member

/// A class which mocks [ContentService].
///
/// See the documentation for Mockito's code generation for more information.
class MockContentService extends _i1.Mock implements _i2.ContentService {
  MockContentService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<_i4.BiteModel?> getTodaysBite() =>
      (super.noSuchMethod(
            Invocation.method(#getTodaysBite, []),
            returnValue: _i3.Future<_i4.BiteModel?>.value(),
          )
          as _i3.Future<_i4.BiteModel?>);

  @override
  _i3.Future<_i4.BiteModel?> getUsersNextBite() =>
      (super.noSuchMethod(
            Invocation.method(#getUsersNextBite, []),
            returnValue: _i3.Future<_i4.BiteModel?>.value(),
          )
          as _i3.Future<_i4.BiteModel?>);

  @override
  _i3.Future<_i4.BiteModel?> getBiteById(String? biteId) =>
      (super.noSuchMethod(
            Invocation.method(#getBiteById, [biteId]),
            returnValue: _i3.Future<_i4.BiteModel?>.value(),
          )
          as _i3.Future<_i4.BiteModel?>);

  @override
  _i3.Future<List<_i4.BiteModel>> getCatchUpBites({int? limit = 10}) =>
      (super.noSuchMethod(
            Invocation.method(#getCatchUpBites, [], {#limit: limit}),
            returnValue: _i3.Future<List<_i4.BiteModel>>.value(
              <_i4.BiteModel>[],
            ),
          )
          as _i3.Future<List<_i4.BiteModel>>);

  @override
  _i3.Future<List<_i4.BiteModel>> getAvailableBites({int? limit = 10}) =>
      (super.noSuchMethod(
            Invocation.method(#getAvailableBites, [], {#limit: limit}),
            returnValue: _i3.Future<List<_i4.BiteModel>>.value(
              <_i4.BiteModel>[],
            ),
          )
          as _i3.Future<List<_i4.BiteModel>>);

  @override
  _i3.Future<List<_i4.BiteModel>> getUserSequentialBites() =>
      (super.noSuchMethod(
            Invocation.method(#getUserSequentialBites, []),
            returnValue: _i3.Future<List<_i4.BiteModel>>.value(
              <_i4.BiteModel>[],
            ),
          )
          as _i3.Future<List<_i4.BiteModel>>);

  @override
  _i3.Future<List<_i4.BiteModel>> getUserSequentialBitesWithComments() =>
      (super.noSuchMethod(
            Invocation.method(#getUserSequentialBitesWithComments, []),
            returnValue: _i3.Future<List<_i4.BiteModel>>.value(
              <_i4.BiteModel>[],
            ),
          )
          as _i3.Future<List<_i4.BiteModel>>);

  @override
  _i3.Future<List<_i4.BiteModel>> getUnlockedBites() =>
      (super.noSuchMethod(
            Invocation.method(#getUnlockedBites, []),
            returnValue: _i3.Future<List<_i4.BiteModel>>.value(
              <_i4.BiteModel>[],
            ),
          )
          as _i3.Future<List<_i4.BiteModel>>);

  @override
  _i3.Future<List<_i4.BiteModel>> getAllBites() =>
      (super.noSuchMethod(
            Invocation.method(#getAllBites, []),
            returnValue: _i3.Future<List<_i4.BiteModel>>.value(
              <_i4.BiteModel>[],
            ),
          )
          as _i3.Future<List<_i4.BiteModel>>);

  @override
  _i3.Future<List<_i4.BiteModel>> getListenedBites() =>
      (super.noSuchMethod(
            Invocation.method(#getListenedBites, []),
            returnValue: _i3.Future<List<_i4.BiteModel>>.value(
              <_i4.BiteModel>[],
            ),
          )
          as _i3.Future<List<_i4.BiteModel>>);

  @override
  _i3.Future<List<_i4.BiteModel>> getGiftedEpisodes() =>
      (super.noSuchMethod(
            Invocation.method(#getGiftedEpisodes, []),
            returnValue: _i3.Future<List<_i4.BiteModel>>.value(
              <_i4.BiteModel>[],
            ),
          )
          as _i3.Future<List<_i4.BiteModel>>);

  @override
  _i3.Future<bool> markBiteAsListened(String? biteId) =>
      (super.noSuchMethod(
            Invocation.method(#markBiteAsListened, [biteId]),
            returnValue: _i3.Future<bool>.value(false),
          )
          as _i3.Future<bool>);

  @override
  _i3.Future<void> markBiteAsOpened(String? biteId) =>
      (super.noSuchMethod(
            Invocation.method(#markBiteAsOpened, [biteId]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<List<_i5.CommentModel>> getCommentsForBite(String? biteId) =>
      (super.noSuchMethod(
            Invocation.method(#getCommentsForBite, [biteId]),
            returnValue: _i3.Future<List<_i5.CommentModel>>.value(
              <_i5.CommentModel>[],
            ),
          )
          as _i3.Future<List<_i5.CommentModel>>);

  @override
  _i3.Future<bool> addComment(String? biteId, String? text) =>
      (super.noSuchMethod(
            Invocation.method(#addComment, [biteId, text]),
            returnValue: _i3.Future<bool>.value(false),
          )
          as _i3.Future<bool>);

  @override
  _i3.Future<Map<String, String>> getUserReactions() =>
      (super.noSuchMethod(
            Invocation.method(#getUserReactions, []),
            returnValue: _i3.Future<Map<String, String>>.value(
              <String, String>{},
            ),
          )
          as _i3.Future<Map<String, String>>);

  @override
  _i3.Future<_i4.BiteModel?> getCurrentDayBite() =>
      (super.noSuchMethod(
            Invocation.method(#getCurrentDayBite, []),
            returnValue: _i3.Future<_i4.BiteModel?>.value(),
          )
          as _i3.Future<_i4.BiteModel?>);

  @override
  _i3.Future<List<_i4.BiteModel>> getUserAvailableBites() =>
      (super.noSuchMethod(
            Invocation.method(#getUserAvailableBites, []),
            returnValue: _i3.Future<List<_i4.BiteModel>>.value(
              <_i4.BiteModel>[],
            ),
          )
          as _i3.Future<List<_i4.BiteModel>>);
}

/// A class which mocks [UserProgressionService].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserProgressionService extends _i1.Mock
    implements _i6.UserProgressionService {
  MockUserProgressionService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<void> initializeUserProgression([String? userId]) =>
      (super.noSuchMethod(
            Invocation.method(#initializeUserProgression, [userId]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<int> getCurrentDay() =>
      (super.noSuchMethod(
            Invocation.method(#getCurrentDay, []),
            returnValue: _i3.Future<int>.value(0),
          )
          as _i3.Future<int>);

  @override
  _i3.Future<bool> shouldUnlockNextBite() =>
      (super.noSuchMethod(
            Invocation.method(#shouldUnlockNextBite, []),
            returnValue: _i3.Future<bool>.value(false),
          )
          as _i3.Future<bool>);

  @override
  _i3.Future<void> unlockNextBite() =>
      (super.noSuchMethod(
            Invocation.method(#unlockNextBite, []),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> migrateExistingUser(String? userId) =>
      (super.noSuchMethod(
            Invocation.method(#migrateExistingUser, [userId]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> handleTrialExpiration() =>
      (super.noSuchMethod(
            Invocation.method(#handleTrialExpiration, []),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> activateSubscription() =>
      (super.noSuchMethod(
            Invocation.method(#activateSubscription, []),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> checkTrialExpiration() =>
      (super.noSuchMethod(
            Invocation.method(#checkTrialExpiration, []),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);
}
